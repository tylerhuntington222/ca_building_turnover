to.area.col="NewArea")
# only update master parcel df if rebuilds were performed
if (res != "None") {
cnt.raw.df <- res
}
## Second, fill open lots
print("Filling open lots of same usetype second")
# check whether there is avail lot area to convert
if (t == "Condo") {
check.lots <- cnt.raw.df[(cnt.raw.df$TYPE %in% c("Condo", "MF")) &
(cnt.raw.df$Status20 == "LotsOpen"), ]
} else {
check.lots <- cnt.raw.df[(cnt.raw.df$TYPE == t) &
(cnt.raw.df$Status20 == "LotsOpen"), ]
}
if (nrow(check.lots) != 0) {
avail.lots <- TRUE
} else {
avail.lots <- FALSE
}
# init floorspace difference tracker for this usetype
t.diff <- CheckDiff(cnt.raw.df, t, status = c("Remain", "Rebuild"),
year=2020, area.col="NewArea")
# convert open lots up to allowable BTL ratios until FS difference is met
# or convertable lot area runs out.
while ((t.diff > 0) & (avail.lots)) {
res <- ConvertLot(cnt.raw.df, type = t, btl.ratio, year=2020,
from.area.col="BArea", to.area.col="NewArea")
cnt.raw.df <- res[[1]]
converted.apn <- res[[2]]
print(sprintf("Allocated FS from open lot on parcel with APN: %s",
converted.apn))
# check if no lots were available to convert
if (res == "None") {
avail.lots = FALSE
} else {
# update Yrfinal and Bin50 fields of parcel with converted lot area
converted <- cnt.raw.df[(cnt.raw.df$APN == converted.apn), ]
converted$Yrfinal <- "2020"
converted$Bin50 <- "1"
cnt.raw.df[(cnt.raw.df$APN == converted.apn), ] <- converted
# check floorspace difference
t.diff <- CheckDiff(cnt.raw.df, t,
status = c("Remain", "Rebuild", "LotsFilled"),
year=2020, area.col="NewArea")
print(sprintf("Updated floorspace difference: %s", t.diff))
}
}
## lastly, allocate remaining FS needs to parcels with ustype "Vacant"
# check whether there are avail vacancies to convert
check.vacs <- cnt.raw.df[(cnt.raw.df$TYPE == "Vacant"), ]
if (nrow(check.vacs) != 0) {
avail.vacancies <- TRUE
} else {
avail.vacancies <- FALSE
}
while ((t.diff > 0) & (avail.vacancies)) {
print(sprintf("Floorspace difference is still positive: %s", t.diff))
print(sprintf("Now allocating vacancies to floorspace of type: %s", t))
# convert vacant parcel to active floorspace
res <- FillVacant(cnt.raw.df, to.type = t,
btl.ratio = btl.ratio, year = 2020)
cnt.raw.df <- res[[1]]
filled.apn <- res[[2]]
print(sprintf("Allocated FS from vacant lot on parcel with APN: %s",
filled.apn))
if (res == "None") {
avail.vacancies <- FALSE
} else {
# check floorspace difference
t.diff <- CheckDiff(cnt.raw.df, t,
status = c("Remain", "Rebuild",
"LotsFilled", "VacantFilled"),
year=2020, area.col="NewArea")
print(sprintf("Updated floorspace difference: %s", t.diff))
}
}
}
}
## if there is still unmet floorspace requirements, export in table
# check fs difference
t.diff <- CheckDiff(cnt.raw.df, t,
status = c("Remain", "Rebuild",
"LotsFilled", "VacantFilled"),
year=2020, area.col="NewArea")
# generate row for this type if t.diff still positive
if (t.diff > 0) {
type.row <- data.frame(TYPE = t, FLOORSPACE_GAP = t.diff)
unmet.fs.gaps <- rbind(unmet.fs.gaps, type.row)
} else {
type.row <- data.frame(TYPE = t, FLOORSPACE_GAP = 0)
unmet.fs.gaps <- rbind(unmet.fs.gaps, type.row)
}
}
# write demo multipliers to output file
cnt.row <- MakeRow(demo.mult.df, cnt.name, "DEMO.MULT.20")
WriteOutput(cnt.row, output.filename, sheet.name = "2020DemoMult")
# write BTL ratios to ouptut file
cnt.row <- MakeRow(btl.ratio.df, cnt.name, "BTL.RATIO")
WriteOutput(cnt.row, output.filename, sheet.name = "2016BtoL")
# calc summary stats for 2020 statuses after simulation
## Step 1. determine 2020 building stock by building type
cnt.sum.20.post <- ddply(cnt.raw.df, .(TYPE, Status20), .drop=F, summarise,
SUM.FS.20 = sum(na.omit(NewArea)),
SUM.LOT.20 = sum(na.omit(LOTAREA)))
# write rebuilds to output table
rebuilds.20 <- cnt.sum.20.post[cnt.sum.20.post$Status20 == "Rebuild",]
if (nrow(rebuilds.20) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2020Rebuild")
} else {
cnt.row <- MakeRow(rebuilds.20, cnt.name, "SUM.FS.20")
WriteOutput(cnt.row, output.filename, sheet.name = "2020Rebuild")
}
# write lots filled to output table
lotsfilled.20 <- cnt.sum.20.post[cnt.sum.20.post$Status20 == "LotsFilled",]
if (nrow(lotsfilled.20) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2020LotsFilled")
} else {
cnt.row <- MakeRow(lotsfilled.20, cnt.name, "SUM.FS.20")
WriteOutput(cnt.row, output.filename, sheet.name = "2020Deactivated")
}
# write vacancies filled to output table
vacfilled.20 <- cnt.sum.20.post[cnt.sum.20.post$Status20 == "VacantFilled",]
if (nrow(vacfilled.20) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2020VacantFilled")
} else {
cnt.row <- MakeRow(vacfilled.20, cnt.name, "SUM.FS.20")
WriteOutput(cnt.row, output.filename, sheet.name = "2020VacantFilled")
}
# write deactivated bldgs to output table
deactiv.20 <- cnt.sum.20.post[cnt.sum.20.post$Status20 == "Deactivated",]
if (nrow(deactiv.20) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2020Deactivated")
} else {
cnt.row <- MakeRow(deactiv.20, cnt.name, "SUM.FS.20")
WriteOutput(cnt.row, output.filename, sheet.name = "2020Deactivated")
}
# write out unment floorspace requirements df
cnt.row <- MakeRow(unmet.fs.gaps, cnt.name, "FLOORSPACE_GAP")
WriteOutput(cnt.row, output.filename,
sheet.name = "2020UnmetFloorspace")
#-----------------------------------------------------------------------------#
############ PHASE II: PROJECT TO 2050 ######
print("Starting Phase II: Determining 2020 building stock")
## Step 1. Determine 2020 building stock
cnt.sum.20 <- ddply(cnt.raw.df, .(TYPE), .drop = F,
summarise, SUM.NewArea.20 = sum(na.omit(NewArea)))
# add 2020 stock df to output.stock.dfs
output.stock.df.lst[[2]] <- cnt.raw.df
# write output shapefile for 2016 building stock
WriteShapefile(cnt.raw.df, cnt.code, 2020)
# organize particular county's data for export
cnt.row <- MakeRow(cnt.sum.20, cnt.name, "SUM.NewArea.20")
# write to output file
WriteOutput(cnt.row, output.filename, sheet.name = "2020Stock")
## Step 2. project 2050 building stock
# susbet growth multipliers for particular county
g.mult.50.cnt <- g.mult.50[g.mult.20$County == cnt.name, ]
# transpose and organize multiplier dataframe
g.mult.50.cnt <- data.frame(t(g.mult.50.cnt))
g.mult.50.cnt$TYPE <- rownames(g.mult.50.cnt)
g.mult.50.cnt <- g.mult.50.cnt[2:nrow(g.mult.50.cnt), ]
names(g.mult.50.cnt) <- c("MULT.50", "TYPE")
rownames(g.mult.50.cnt) <- seq(1, nrow(g.mult.50.cnt))
# merge multipliers to parcel data
cnt.sum.20 <- merge(cnt.sum.20, g.mult.50.cnt, by = "TYPE", all.x = T)
cnt.sum.20$SUM.NewArea.20 <- as.numeric(cnt.sum.20$SUM.NewArea.20)
cnt.sum.20$MULT.50 <- as.numeric(as.character(cnt.sum.20$MULT.50))
# multiply 2016 stocks by 2020 multipliers
cnt.sum.20$PROJ.FS.50 <- NA
cnt.sum.20$PROJ.FS.50 <- cnt.sum.20$SUM.NewArea.20 * cnt.sum.20$MULT.50
PROJ.FS.50.col <- cnt.sum.20[,c("TYPE", "PROJ.FS.50")]
# merge 2020 projections with projections dataframe
proj.df <- merge(proj.df, PROJ.FS.50.col, by="TYPE", all.x=T)
# organize particular county's data for export
cnt.row <- MakeRow(cnt.sum.20, cnt.name, "PROJ.FS.50")
# write to output file
WriteOutput(cnt.row, output.filename, sheet.name = "2050Projected")
## Step 3. determine if demolished by 2050
# join 2050 cutoff table by usetype
cutoffs.50 <- cutoff.yrs[, c("TYPE", "Cut50"),]
cnt.raw.df <- merge(cnt.raw.df, cutoffs.50, by = "TYPE", all.x = T)
# iterate over all parcels, checking if they are demo'd by 2050
cnt.raw.df$Bin50 <- CheckIfRemains(cnt.raw.df$Yrfinal, cnt.raw.df$Cut50)
## Step 4. assign 2020 status labels to parcels
# init col to store 2050 status for each parcel
cnt.raw.df$Status50 <- NA
# assign 2020 statuses to parcels
print("Determining status of parcels in 2050...")
BinYEAR <- as.numeric(as.character(cnt.raw.df$Bin50))
BAREA <- as.numeric(as.character(cnt.raw.df$BArea))
LOTAREA <- as.numeric(as.character(cnt.raw.df$LOTAREA))
TYPE <- as.character(cnt.raw.df$TYPE)
cnt.raw.df$Status50 <- unlist(AssignStatus(BinYEAR, BAREA, LOTAREA, TYPE))
## Step 5: Generate summary stats for building stock in 2050, by Status50
cnt.sum.50 <- ddply(cnt.raw.df, .(TYPE, Status50), .drop = F,
summarise, SUM.FS.50 = sum(NewArea),
SUM.LOT.50 = sum(na.omit(LOTAREA)))
## Export summary table of remaining buildings in 2050
remain.50 <- cnt.sum.50[cnt.sum.50$Status50 == "Remain", ]
cnt.row <- MakeRow(remain.50, cnt.name, "SUM.FS.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050Remain")
## Export summary table of demo buildings in 2050
demo.50 <- cnt.sum.50[cnt.sum.50$Status50 == "Demo", ]
cnt.row <- MakeRow(demo.50, cnt.name, "SUM.FS.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050Demo")
## Export summary table of open lots  in 2050
lots.50 <- cnt.sum.50[cnt.sum.50$Status50 == "LotsOpen", ]
cnt.row <- MakeRow(lots.50, cnt.name, "SUM.LOT.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050LotsOpen")
# add field FNArea.50
cnt.raw.df$FNArea.50 <- 0
# for parcels with 2050 status Remain, set FNArea.50
rem.50 <- cnt.raw.df[cnt.raw.df$Status50 == "Remain", ]
rem.50$FNArea.50 <- rem.50$NewArea
cnt.raw.df[cnt.raw.df$Status50 == "Remain", ] <- rem.50
# determine additional floorspace needs for 2050
yr20.data <- subset(cnt.sum.20,
select = c("TYPE", "SUM.NewArea.20", "PROJ.FS.50"))
yr50.data <- cnt.sum.50[cnt.sum.50$Status50 == "Remain", ]
fs.diffs.df <- merge(yr20.data, yr50.data, by = "TYPE")
# calculate differences between remaining and projected floorspace by type
fs.diffs.df$DIFF <- fs.diffs.df$PROJ.FS.50 - fs.diffs.df$SUM.FS.50
## Export summary table of 2050 floorspace differences
cnt.row <- MakeRow(fs.diffs.df, cnt.name, "DIFF")
WriteOutput(cnt.row, output.filename, sheet.name = "2050Diff")
print("Simulating building turnover for 2050...")
# set up parcel types to iterate over
parcel.types <- fs.diffs.df$TYPE
type.iterators <- parcel.types[!(parcel.types %in% c("PUD", "Vacant"))]
# init df for storing demo multipliers
demo.mult.df <- data.frame(TYPE = character(), DEMO.MULT.50 = numeric(),
stringsAsFactors = F)
# init df for storing btl ratios
btl.ratio.df <- data.frame(TYPE = character(), BTL.RATIO = numeric(),
stringsAsFactors = F)
# init dataframe to store unmet gaps
unmet.fs.gaps <- data.frame(TYPE = character(), FLOORSPACE_GAP = numeric())
# iterate over building types
for (t in type.iterators) {
print(sprintf("Working on buildings of type: %s", t))
# subset for row of particular building type
type.row <- fs.diffs.df[fs.diffs.df$TYPE == t, ]
fs.diff <- type.row$DIFF
# calculate BArea to LotArea ratio for usetype
btl.ratio <- CalcBtlRatio(cnt.raw.df, t, barea.col="NewArea")
# add to btl ratio df
btl.row <- data.frame(TYPE = t, BTL.RATIO = btl.ratio)
btl.ratio.df <- rbind(btl.ratio.df, btl.row)
# case 1: difference is negative
if (fs.diff < 0) {
print("Floorspace difference is negative")
print(sprintf("Randomly vacating remaining buildings of type: %s", t))
# randomly vacate remaining buildings until diff is positive
t.diff <- fs.diff
while (t.diff < 0) {
res <- RandomSwitch(cnt.raw.df, from.type = t, from.status = "Remain",
to.type = t, to.status = "Deactivated",
status.year=2050)
cnt.raw.df <- res[[1]]
switched.apn <- res[[2]]
print(sprintf("Vacated building on parcel with APN: %s", switched.apn))
# check updated floorspace difference following switch
t.diff <- CheckDiff(cnt.raw.df, t, status = "Remain",
year=2050, area.col="FNArea.50")
print(sprintf("Updated floorspace difference: %s", t.diff))
}
# add zero value for this usetype's demo multiplier in output table
c.row <- data.frame(TYPE = t, DEMO.MULT.50 = 0)
demo.mult.df <- rbind(demo.mult.df, c.row)
# case 1b: floorspace difference is positive but less than 100000
} else if ((fs.diff > 0) & (fs.diff <= 100000)) {
print("Floorspace difference is positive, but less than 100,000 sqft")
demo.50.df <- subset(cnt.sum.50, (Status50 == "Demo") & (TYPE == t))
demo.sum.50 <- sum(demo.50.df$SUM.FS.50)
print("Calculating Gap-to-demo ratio...")
ratio <- fs.diff/demo.sum.50
print(sprintf("Gap-to-demo ratio is: %s", ratio))
# add to demo mult df
c.row <- data.frame(TYPE = t, DEMO.MULT.50 = ratio)
demo.mult.df <- rbind(demo.mult.df, c.row)
# case 2: floorspace difference is positive
} else if (fs.diff > 100000) {
print("Floorspace difference is positive")
demo.50.df <- subset(cnt.sum.50, (Status50 == "Demo") & (TYPE == t))
demo.sum.50 <- sum(demo.50.df$SUM.FS.50)
print("Calculating Gap-to-demo ratio...")
ratio <- fs.diff/demo.sum.50
print(sprintf("Gap-to-demo ratio is: %s", ratio))
# add to demo mult df
c.row <- data.frame(TYPE = t, DEMO.MULT.50 = ratio)
demo.mult.df <- rbind(demo.mult.df, c.row)
# case 2a: GTD ratio is less than 1
if (ratio < 1) {
print("GTD ratio is <1; rebuilding demos to close floorspace gap")
# init floorspace difference tracker for this usetype
t.diff <- CheckDiff(cnt.raw.df, t, status = "Remain",
year=2050, area.col="FNArea.50")
# rebuild demo buildings until difference gap is closed
while (t.diff > 0) {
res <- SizeRankedSwitch(cnt.raw.df, from.type = t,
from.status = "Demo", to.type = t,
to.status = "Rebuild", year=2050,
area.col="NewArea")
cnt.raw.df <- res[[1]]
rebuilt.apn <- res[[2]]
print(sprintf("Building with APN: %s rebuilt", rebuilt.apn))
# update NewArea, Yrfinal and Bin50 fields of rebuild
rebuild <- cnt.raw.df[(cnt.raw.df$APN == rebuilt.apn), ]
rebuild$NewArea <- rebuild$BArea
rebuild$Yrfinal <- "2050"
rebuild$Bin50 <- "1"
cnt.raw.df[(cnt.raw.df$APN == rebuilt.apn), ] <- rebuild
# check floorspace difference
t.diff <- CheckDiff(cnt.raw.df, t, status = c("Remain", "Rebuild"),
year=2050, area.col="FNArea.50")
print(sprintf("Updated floorspace difference: %s", t.diff))
# init expansion factor and step var to increase by on each pass
expand.factor <- 1.5
expand.step <- 0.5
max.expand.factor <- 4
# expand rebuilt building size until max expansion factor reached
# or floorspace difference gap is closed
while((t.diff > 0) & (expand.factor <= max.expand.factor)) {
print(sprintf("Expanding area of rebuild by factor of %s",
expand.factor))
cnt.raw.df <- ExpandArea(cnt.raw.df, rebuilt.apn, expand.factor,
from.area.col="NewArea",
to.area.col="FNArea.50")
# increase expansion factor
expand.factor <- expand.factor + expand.step
t.diff <- CheckDiff(cnt.raw.df, t, status = c("Remain", "Rebuild"),
year=2050, area.col="FNArea.50")
print(sprintf("Updated floorspace difference: %s", t.diff))
}
}
# case 2b: GTD ratio is betwen 1 and 4 (inclusive)
} else if ((ratio >= 1) & (ratio <= 8)) {
print("Gap-to-demo ratio is >=1 & <= 8; upsizing rebuilds to close gap")
# expand areas of rebuilds to close gap
cnt.raw.df <- RebuildMultiplied(cnt.raw.df, type = t,
from.status = "Demo", to.status = "Rebuild",
mult = ratio, year=2050,
from.area.col="NewArea",
to.area.col="FNArea.50")
# case 2c: GTD ratio is greater than 8
} else if (ratio > 8) {
print("Gap-to-demo ratio is >4; allocating demos to rebuilds first")
# first allocate all demos if any exist
res <- RebuildMultiplied(cnt.raw.df, type = t,
from.status = "Demo", to.status = "Rebuild",
mult = 8, year=2050, from.area.col="NewArea",
to.area.col="FNArea.50")
if (res != "None") {
cnt.raw.df <- res
}
## Second, fill open lots
print("Filling open lots of same usetype second")
# check whether there is avail lot area to convert
if (t == "Condo") {
check.lots <- cnt.raw.df[(cnt.raw.df$TYPE %in% c("Condo", "MF")) &
(cnt.raw.df$Status50 == "LotsOpen"), ]
} else {
check.lots <- cnt.raw.df[(cnt.raw.df$TYPE == t) &
(cnt.raw.df$Status50 == "LotsOpen"), ]
}
if (nrow(check.lots) != 0) {
avail.lots <- TRUE
} else {
avail.lots <- FALSE
}
# init floorspace difference tracker for this usetype
t.diff <- CheckDiff(cnt.raw.df, t, status = c("Remain", "Rebuild"),
year=2050, area.col="FNArea.50")
# convert open lots up to allowable BTL ratios until FS difference is met
# or convertable lot area runs out.
while ((t.diff > 0) & (avail.lots)) {
res <- ConvertLot(cnt.raw.df, type = t, btl.ratio, year=2050,
from.area.col="NewArea", to.area.col="FNArea.50")
cnt.raw.df <- res[[1]]
converted.apn <- res[[2]]
print(sprintf("Allocated FS from open lot on parcel with APN: %s",
converted.apn))
# check if no lots were available to convert
if (res == "None") {
avail.lots = FALSE
} else {
# update Yrfinal and Bin50 fields of parcel with converted lot area
converted <- cnt.raw.df[(cnt.raw.df$APN == converted.apn), ]
converted$Yrfinal <- "2050"
cnt.raw.df[(cnt.raw.df$APN == converted.apn), ] <- converted
# check floorspace difference
t.diff <- CheckDiff(cnt.raw.df, t,
status = c("Remain", "Rebuild", "LotsFilled"),
year=2050, area.col="FNArea.50")
print(sprintf("Updated floorspace difference: %s", t.diff))
}
}
## lastly, allocate remaining FS needs to parcels with ustype "Vacant"
# check whether there are avail vacancies to convert
check.vacs <- cnt.raw.df[(cnt.raw.df$TYPE == "Vacant"), ]
if (nrow(check.vacs) != 0) {
avail.vacancies <- TRUE
} else {
avail.vacancies <- FALSE
}
while ((t.diff > 0) & (avail.vacancies)) {
print(sprintf("Floorspace difference is still positive: %s", t.diff))
print(sprintf("Now allocating vacancies to floorspace of type: %s", t))
# convert vacant parcel to active floorspace
res <- FillVacant(cnt.raw.df, to.type = t,
btl.ratio = btl.ratio, year = 2050)
cnt.raw.df <- res[[1]]
filled.apn <- res[[2]]
print(sprintf("Allocated FS from vacant lot on parcel with APN: %s",
filled.apn))
if (res == "None") {
avail.vacancies <- FALSE
} else {
# check floorspace difference
t.diff <- CheckDiff(cnt.raw.df, t,
status = c("Remain", "Rebuild",
"LotsFilled", "VacantFilled"),
year=2050, area.col="FNArea.50")
print(sprintf("Updated floorspace difference: %s", t.diff))
}
}
}
}
## if there is still unmet floorspace requirements, export in table
# check diff
t.diff <- CheckDiff(cnt.raw.df, t,
status = c("Remain", "Rebuild",
"LotsFilled", "VacantFilled"),
year=2050, area.col="FNArea.50")
# generate row for this type if t.diff still positive
if (t.diff > 0) {
type.row <- data.frame(TYPE = t, FLOORSPACE_GAP = t.diff)
unmet.fs.gaps <- rbind(unmet.fs.gaps, type.row)
} else {
type.row <- data.frame(TYPE = t, FLOORSPACE_GAP = 0)
unmet.fs.gaps <- rbind(unmet.fs.gaps, type.row)
}
}
# write demo multipliers to output file
cnt.row <- MakeRow(demo.mult.df, cnt.name, "DEMO.MULT.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050DemoMult")
# write BTL ratios to ouptut file
cnt.row <- MakeRow(btl.ratio.df, cnt.name, "BTL.RATIO")
WriteOutput(cnt.row, output.filename, sheet.name = "2020BtoL")
# calc summary stats for 2050 statuses after simulation
cnt.sum.50.post <- ddply(cnt.raw.df, .(TYPE, Status50), .drop=F, summarise,
SUM.FS.50 = sum(na.omit(NewArea)))
# write rebuilds to output table
rebuilds.50 <- cnt.sum.50.post[cnt.sum.50.post$Status50 == "Rebuild",]
if (nrow(rebuilds.50) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2050Rebuild")
} else {
cnt.row <- MakeRow(rebuilds.50, cnt.name, "SUM.FS.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050Rebuild")
}
# write lots filled to output table
lotsfilled.50 <- cnt.sum.50.post[cnt.sum.50.post$Status50 == "LotsFilled",]
if (nrow(lotsfilled.50) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2050LotsFilled")
} else {
cnt.row <- MakeRow(lotsfilled.50, cnt.name, "SUM.FS.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050Deactivated")
}
# write vacancies filled to output table
vacfilled.50 <- cnt.sum.50.post[cnt.sum.50.post$Status50 == "VacantFilled",]
if (nrow(vacfilled.50) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2050VacantFilled")
} else {
cnt.row <- MakeRow(vacfilled.50, cnt.name, "SUM.FS.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050VacantFilled")
}
# write deactivated bldgs to output table
deactiv.50 <- cnt.sum.50.post[cnt.sum.50.post$Status50 == "Deactivated",]
if (nrow(deactiv.50) == 0) {
cnt.row <- MakeZeroRow(unique(cnt.raw.df$TYPE), cnt.name)
WriteOutput(cnt.row, output.filename, sheet.name = "2050Deactivated")
} else {
cnt.row <- MakeRow(deactiv.50, cnt.name, "SUM.FS.50")
WriteOutput(cnt.row, output.filename, sheet.name = "2050Deactivated")
}
# write out unmet floorspace requirements df
cnt.row <- MakeRow(unmet.fs.gaps, cnt.name, "FLOORSPACE_GAP")
WriteOutput(cnt.row, output.filename,
sheet.name = "2050UnmetFloorspace")
############ PHASE III ############
# create 2050 building stock
cnt.sum.50 <- ddply(cnt.raw.df, .(TYPE), .drop = F,
summarise, SUM.FNArea.50 = sum(na.omit(FNArea.50)))
# add 2016 stock df to output.stock.dfs
output.stock.df.lst[[3]] <- cnt.raw.df
# write output shapefile for 2050 building stock
WriteShapefile(cnt.raw.df, cnt.code, 2050)
# organize particular county's summary data for export
cnt.row <- MakeRow(cnt.sum.50, cnt.name, "SUM.FNArea.50")
# write to output file
WriteOutput(cnt.row, output.filename, sheet.name = "2050Stock")
# export output stock list
saveRDS(output.stock.df.lst, "stocks_16_20_50.RDS")
})
